import rclpy
from rclpy.node import Node
from sensor_msgs.msg import JointState
import time

class TrajectoryPublisher(Node):
    def __init__(self, trajectory_points, delay=0.1):
        super().__init__('trajectory_publisher')
        self.publisher_ = self.create_publisher(JointState, 'joint_states', 10)
        self.trajectory_points = trajectory_points
        self.delay = delay

        self.joint_names = [
            'shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint',
            'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint'
        ]

    def send_trajectory(self):
        joint_msg = JointState()
        joint_msg.name = self.joint_names

        for i, position in enumerate(self.trajectory_points):
            for _ in range(5):  # Publish the same point 5 times
                joint_msg.position = position
                joint_msg.header.stamp = self.get_clock().now().to_msg()
                self.publisher_.publish(joint_msg)
                time.sleep(self.delay / 5)
def main(args=None):
    rclpy.init(args=args)

    trajectory_points =[
    [3.04735722, 1.43234876, -0.99224227, -3.06088037, 1.47113891, 0.0402389],
    [-3.00703659, 1.4793159, -1.24841859, -0.13199798, -1.26010357, 3.13328787],
    [-2.75725716, 1.47033819, -1.19452538, -0.33632004, -1.29540519, 3.02629174],
    [0.21370258, -1.29114759, 0.78941802, -0.17904259, 1.52734176, -0.10813621],
    [-2.88185164, 1.48001816, -1.11292701, -0.22143792, -1.40283929, 3.04997605],
    [-0.17790051, -1.48011736, 1.40078986, 0.14878807, 1.09735876, 0.04383337],
    [-0.18584139, -1.51722868, 1.28180655, -2.98188435, -1.26753282, -3.08760645],
    [0.01643844, -1.45936911, 1.02248094, -0.0111254, 1.47390739, -0.00384385],
    [2.88133243, 1.37433621, -0.90110795, 0.21780322, -1.5020651, -3.02176231],
    [-0.2110474, -1.36661945, 0.93449947, -2.96303741, -1.45702724, -3.04962402],
    [2.84984113, 1.55454129, -1.04925296, -2.90029318, 1.52398511, 0.12947849],
    [-0.49888115, -1.54272305, 1.20392237, 0.42716371, 1.35390669, 0.16655954],
    [-0.59294861, -1.48253681, 1.34637899, -2.59932047, -1.13424377, -3.04055598],
    [2.75145972, 1.41723544, -0.84986169, -2.81284068, 1.56469357, 0.20601084],
    [2.63072276, 1.34003962, -0.86721291, 0.42469991, -1.4504158, -2.89919084],
    [3.06693792, 1.52262904, -0.98934145, 0.063577, -1.56368657, -3.10719686],
    [0.05709385, -1.54471144, 1.18370209, -0.0396165, 1.3947782, -0.04336265],
    [2.8350569, 1.40295111, -1.19654496, 0.26812285, -1.22987292, -3.06167792],
    [2.8943358, 1.29034468, -0.96763355, -2.9305676, 1.35112222, 0.08747254],
    [-3.09432603, 1.56080776, -1.52223828, 3.09996554, 1.06524588, -0.00562399],
    [2.87973264, 1.39829493, -1.3503886, 0.24790816, -1.07283118, -3.11989519],
    [0.07510844, -1.41804308, 1.48934753, 3.07329786, -0.95000775, 3.13659612],
    [-0.2778901, -1.48291728, 0.95319939, 0.25325472, 1.54298133, 0.06037583],
    [2.77727008, 1.509319, -1.07003465, -2.83331877, 1.42615234, 0.142467],
    [2.80615643, 1.44452558, -1.11017499, -2.84259905, 1.33443377, 0.07664873],
    [-0.3386627, -1.45864328, 1.13196464, -2.87063394, -1.30841322, -3.00222847],
    [-0.32837328, -1.41696991, 1.07654835, 0.30260554, 1.34794662, 0.05446913],
    [2.82771684, 1.44759367, -1.1463512, -2.89982338, 1.28285684, 0.13860491],
    [3.03484768, 1.28122157, -1.05462698, 0.04870811, -1.22079235, -3.03306307],
    [0.14415745, -1.26505344, 0.88249467, 3.03549642, -1.38822798, 3.04423454],
    [0.15124037, -1.41057971, 1.05294292, -0.12934934, 1.36442247, -0.05022387],
    [-2.97114808, 1.48860935, -1.16142677, 3.00457186, 1.32655179, -0.07450975],
    [0.19516875, -1.47174839, 1.0065293, -0.16327802, 1.46847163, -0.08735505],
    [0.19014768, -1.5426797, 1.09294001, -0.15959195, 1.45084549, -0.07925314],
    [0.10405462, -1.4666896, 0.91479805, -0.06904567, 1.55928439, -0.09827015],
    [0.23162392, -1.34086985, 0.90961961, -0.17402089, 1.42793357, -0.16097308],
    [0.21216316, -1.51227786, 1.01686631, 2.97409742, -1.52645263, 3.00918115],
    [-3.10399816, 1.5007705, -1.00555638, -0.05983314, -1.50686536, -3.08331514],
    [0.02475036, -1.50061863, 1.05569549, 0.00274577, 1.44882209, -0.05811531],
    [3.03247791, 1.52135567, -0.97520919, 0.11729525, -1.55981761, 3.11939469],
    [2.9033175, 1.39426826, -0.88734345, 0.21056779, -1.49036569, -3.06388576],
    [-0.35303311, -1.36501427, 0.76437391, -2.87419754, -1.5665798, -2.8710001],
	]


    node = TrajectoryPublisher(trajectory_points, delay=0.2)
    node.send_trajectory()

    rclpy.spin_once(node, timeout_sec=0.1)  # Needed so rosout logs go out
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
